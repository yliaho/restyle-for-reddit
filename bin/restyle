#!/usr/bin/env node
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Snoowrap = require('snoowrap');
var sass = require('node-sass');
var fs = require('fs');
var util = require('util');
var path = require('path');

var author = {"name":"Joonas Yliaho","email":"joonas.yliaho@gmail.com"};
var version = "0.2.15";

class RedditConnector {
    constructor(credentials) {
        this.username = null;
        this.password = null;
        this.clientId = null;
        this.clientSecret = null;
        this.userAgent = null;
        this.snoowrap = null;
        this.init(credentials);
    }
    init(credentials) {
        this.username = credentials.username;
        this.password = credentials.password;
        this.clientId = credentials.clientId;
        this.clientSecret = credentials.clientSecret;
        this.userAgent =
            `RESTYLE - Publish stylesheets from your favourite code editor.` +
                `Author: ${author}, Version: ${version}`;
        this.connect();
    }
    connect() {
        this.snoowrap = new Snoowrap({
            username: this.username,
            password: this.password,
            clientId: this.clientId,
            clientSecret: this.clientSecret,
            userAgent: this.userAgent
        });
    }
    get r() {
        return this.snoowrap;
    }
}

class ScssCompiler {
    render(file) {
        return new Promise((resolve, reject) => {
            sass.render({
                file,
                outputStyle: 'compressed'
            }, (error, result) => {
                if (error)
                    return reject(error);
                if (result.css)
                    return resolve(result);
                reject(result);
            });
        });
    }
}

const MODULE_NAME = 'Restyle';
//# sourceMappingURL=constants.js.map

class InvalidConfig extends Error {
    constructor() {
        super(`${MODULE_NAME} couldn't resolve config file. Please provide restyle.config.js in your project root`);
    }
}
class NoCredentials extends Error {
    constructor() {
        super(`${MODULE_NAME} couldn't find credentials property in restyle config. Please provide a credentials property with username, password, clientId and clientSecret`);
    }
}


var errors = Object.freeze({
	InvalidConfig: InvalidConfig,
	NoCredentials: NoCredentials
});

const readFileAsync = util.promisify(fs.readFile);
const writeFileAsync = util.promisify(fs.writeFile);
class Restyle {
    constructor(config) {
        this.connector = null;
        this.config = null;
        this.scssCompiler = null;
        if (typeof config === 'string') {
            this.config = require(config);
        }
        else if (typeof config === 'object') {
            this.config = Object.assign({}, config);
        }
        else {
            throw new InvalidConfig();
        }
        this.init();
    }
    init() {
        this.scssCompiler = new ScssCompiler();
        this.initConnector();
    }
    initConnector() {
        if (this.config.credentials) {
            this.connector = new RedditConnector(this.config.credentials);
        }
        else {
            throw new NoCredentials();
        }
    }
    compileScss(input, output) {
        this.scssCompiler.render(input).then((render) => {
            writeFileAsync(output, render.css).then(() => this.publish(this.config.output));
        });
    }
    watch(interval) {
        const { input, output } = this.config;
        fs.watchFile(input, { interval }, (_curr, _prev) => {
            this.compileScss(input, output);
        });
    }
    publish(cssPath) {
        readFileAsync(cssPath, { encoding: 'utf8' }).then(css => {
            this.connector.r
                .getSubreddit(this.config.subreddit)
                .updateStylesheet({
                css,
                reason: 'restyle'
            })
                .then(status)
                .catch(_error => errorHandler('Invalid CSS'));
        });
        function status(result) {
            console.log(result);
        }
        function errorHandler(error) {
            console.log(error);
        }
    }
}

Restyle.errors = errors;

const isDev = process.env.NODE_ENV === 'development' ? true : false;
const configPath = isDev
    ? require(path.resolve(process.cwd(), 'test/sample/restyle.config.js'))
    : require(path.resolve(process.cwd(), 'restyle.confige.js'));
const restyle = new Restyle(configPath);
function pushCssToSub() {
    restyle.watch(1000);
}
const program = require('commander');
program
    .version(process.env.VERSION)
    .command('watch [css] [subreddit]')
    .action(pushCssToSub);
program.parse(process.argv);
//# sourceMappingURL=index.js.map

exports.isDev = isDev;
